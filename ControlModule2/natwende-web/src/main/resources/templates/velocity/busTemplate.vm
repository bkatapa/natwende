var firstSeatLabel = 1;
var oldJQuery = jQuery.noConflict(true), newJQuery = jQuery;
var sc;
var bookedSeats;
var bookingMode = 1;

(function ($) {
	// Code that needs new version goes here
	$(document).ready(function () {
		displaySeats(bookedSeats);
	});
}(newJQuery));

function displaySeats(bookedSeats) {
	var $cart = $('#selected-seats');
	var $counter = $('#counter');
	var $total = $('#total');
			
	sc = $('#seat-map').seatCharts({
		map: [$seats],
		seats: {
			f: {
				price   : 100,
				classes : 'first-class', //your custom CSS class
				category: 'First Class'
			},
			e: {
				price   : $price,
				classes : 'economy-class', //your custom CSS class
				category: ''
			}     
		},
		naming : {
			top : false,
			getLabel : function (character, row, column) {
				return firstSeatLabel++;
			},
		},
		legend : {
			node : $('#legend'),
			items : [
				// [ 'f', 'available',   'First Class' ],
				[ 'e', 'available',   'Free'],
				[ 'f', 'unavailable', 'Booked']
				// ['e', 'Selected', 'Selected'],
			],         
		},
		#[[
		click: function () {
			if (this.status() == 'available') {
				if (bookingMode === 1) { // if in single booking mode
					$cart.empty();
					sc.find('selected').status('available'); // Free all selected seats
				}
							
				//let's create a new <li> which we'll add to the cart items
				$('<li>'+this.data().category+' Seat # '+this.settings.label+': <b>$'+this.data().price+'</b> <a href="#" class="cancel-cart-item">[cancel]</a></li>')
						.attr('id', 'cart-item-'+this.settings.id)
						.data('seatId', this.settings.id)
						.appendTo($cart);
          
				/*
				* Lets up<a href="https://www.jqueryscript.net/time-clock/">date</a> the counter and total
				*
				* .find function will not find the current seat, because it will change its stauts only after return
				* 'selected'. This is why we have to add 1 to the length and the current seat price to the total.
				*/
				if (bookingMode === 1) { // If in single booking mode
					$counter.text(1);
					$total.text(this.data().price);
				}
				else {
					$counter.text(sc.find('selected').length+1);
					$total.text(recalculateTotal(sc)+this.data().price);
  				}
  				postBookingData();
  				//sendData('selected_seat:' + this.settings.label);
  				sendData(JSON.stringify({ seatNo: this.settings.label, selected: true }));
				return 'selected';
			} 
			else if (this.status() === 'selected') {
				//update the counter
				if (bookingMode === 1) { // If in single booking mode
					$counter.text(0);
					$total.text(0);
				}
				else {
					$counter.text(sc.find('selected').length-1);
					//and total
					$total.text(recalculateTotal(sc)-this.data().price);
				}
				//remove the item from our cart				
				$('#cart-item-'+this.settings.id).remove();

				//seat has been vacated
				// postBookingData();
				//sendData('unselected_seat:' + this.settings.label);
				sendData(JSON.stringify({ seatNo: this.settings.label, selected: false }));
				return 'available';
			} 
			else if (this.status() == 'unavailable') {
				//seat has been already booked
				return 'unavailable';
			} 
			else {
				return this.style();
			}
		}
		]]#
	});

	//this will handle "[cancel]" link clicks
	$('#selected-seats').on('click', '.cancel-cart-item', function () {
		//let's just trigger Click event on the appropriate seat, so we don't have to repeat the logic here
		sc.get($(this).parents('li:first').data('seatId')).click();
	});

	//let's pretend some seats have already been booked
	//sc.get(['1_2', '4_1', '7_1', '7_2']).status('unavailable');

	//updateOccupiedSeats(sc, bookedSeats);
}

// Code that needs oldJQuery and newJQuery can go here

function recalculateTotal(sc) {
	if (sc === undefined) {
		alert('sc is undefined!');
	}

	var total = 0;

	//basically find every selected seat and sum its price
	sc.find('selected').each(function () {
		total += this.data().price;
	});
  
	return total;
}
		
function updateSeats(jsonObj) {

	console.log(`*****************************************************`);
	console.log(`Received object: ${JSON.stringify(jsonObj)}`);
	console.log(`Coordinates: ${jsonObj.coordinates}`);
	console.log(`Action: ${jsonObj.action}`);
	console.log(`Message: ${jsonObj.message}`);
	console.log(`Avail seats: ${jsonObj.availSeats}`);
	console.log(`Traveller endpoints: ${jsonObj.endpoints}`);	

	var coordinates = jsonObj.coordinates;
	var action = jsonObj.action;
	var travellerEndpoints = document.getElementById('traveller-endpoints').value;	
	travellerEndpoints = JSON.parse(travellerEndpoints);
	
	console.log(travellerEndpoints);
	console.log(`*****************************************************`);
	
	let endpoints = jsonObj.endpoints;
	let selectableCoordinates = jsonObj.selectableCoordinates;
	let userBookingTokens = jsonObj.userBookingTokens;
	let allBookingTokens = jsonObj.allBookingTokens;
	let reservedCoordinates = jsonObj.reservedCoordinates;

	reservedCoordinates = getNonSelectableCoordinatesForClient(endpoints, selectableCoordinates, userBookingTokens, reservedCoordinates, allBookingTokens);
	   
   	if (jsonObj.message) {
		jsonObj.message.severity = jsonObj.action === 'reverse' ? 'warn' : 'info';
		handleMessage(jsonObj.message);
	}
	if (jsonObj.availSeats) {
		updateAvailSeats(jsonObj.availSeats);
	}
	if (jsonObj.action) {	   	
		switch (action) {
			case 'reserve':				
				sc.get(reservedCoordinates).status('unavailable');							
				break;
			case 'vacate': 
				sc.get(reservedCoordinates).status('available');
				break;
			case 'select': 
				sc.get(selectableCoordinates).status('selected');
				break;
			default: 
				console.log('no seats to update: ' + action);
		}
	}
}

function freeSeats(seats) {
	var res = JSON.stringify(seats).replace(/ /g, '');
	var parseRes = JSON.parse(res);
	sc.get(parseRes).status('available');
}

function selectSeats(seats) {
	var parseRes = JSON.parse(JSON.stringify(seats).replace(/ /g, ''));
	sc.get(parseRes).status('selected');
}

function setTripPrice(tripPrice) { alert(tripPrice);
	if (tripPrice === undefined) {
		return;
	}
	this.data().price = tripPrice;
}

function getNonSelectableCoordinatesForClient(endpoints, selectableCoordinates, userBookingTokens, reservedCoordinates, allBookingTokens) {		
  
    reservedCoordinates = reservedCoordinates.filter( el => !selectableCoordinates.includes( el ) );
    allBookingTokens = allBookingTokens.filter( el => !userBookingTokens.includes( el ) );
    
    allBookingTokens.forEach(token => {        
        let tokenEndpoints = token.split("|");

        if (endpoints[0].charAt(0) >= tokenEndpoints[3].charAt(0) || endpoints[1].charAt(0) <= tokenEndpoints[2].charAt(0)) {
            reservedCoordinates.splice(reservedCoordinates.indexOf(tokenEndpoints[1]), 1);			
        }
    });
    
    return reservedCoordinates;
}